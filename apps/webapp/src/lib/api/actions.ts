/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Connex Tech Test API
 * OpenAPI spec version: 0.0.1
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import { faker } from '@faker-js/faker';

import { HttpResponse, http } from 'msw';

export type Weather200DataItem = {
  location?: string;
  temp?: number;
};

export type Weather200 = {
  data: Weather200DataItem[];
};

export type Time200 = {
  current_time: string;
};

export type Interactions200DataItem = {
  id?: number;
  agent_id?: number;
  customer_id?: number;
  length_seconds?: number;
  created_at?: string;
};

export type Interactions200 = {
  data: Interactions200DataItem[];
};

export type Contacts200DataItem = {
  id?: number;
  name?: string;
};

export type Contacts200 = {
  data: Contacts200DataItem[];
};

export type Agents200DataItem = {
  id?: number;
  name?: string;
};

export type Agents200 = {
  data: Agents200DataItem[];
};

/**
 * Fetches current weather of various locations
 */
export const weather = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Weather200>> => {
  return axios.get(`/weather`, options);
};

export const getWeatherQueryKey = () => {
  return [`/weather`] as const;
};

export const getWeatherQueryOptions = <
  TData = Awaited<ReturnType<typeof weather>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof weather>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWeatherQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof weather>>> = ({
    signal,
  }) => weather({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof weather>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WeatherQueryResult = NonNullable<
  Awaited<ReturnType<typeof weather>>
>;
export type WeatherQueryError = AxiosError<unknown>;

export function useWeather<
  TData = Awaited<ReturnType<typeof weather>>,
  TError = AxiosError<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof weather>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof weather>>,
          TError,
          Awaited<ReturnType<typeof weather>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWeather<
  TData = Awaited<ReturnType<typeof weather>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof weather>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof weather>>,
          TError,
          Awaited<ReturnType<typeof weather>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWeather<
  TData = Awaited<ReturnType<typeof weather>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof weather>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useWeather<
  TData = Awaited<ReturnType<typeof weather>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof weather>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWeatherQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetches current server time
 */
export const time = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Time200>> => {
  return axios.get(`/time`, options);
};

export const getTimeQueryKey = () => {
  return [`/time`] as const;
};

export const getTimeQueryOptions = <
  TData = Awaited<ReturnType<typeof time>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof time>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTimeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof time>>> = ({
    signal,
  }) => time({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof time>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TimeQueryResult = NonNullable<Awaited<ReturnType<typeof time>>>;
export type TimeQueryError = AxiosError<unknown>;

export function useTime<
  TData = Awaited<ReturnType<typeof time>>,
  TError = AxiosError<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof time>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof time>>,
          TError,
          Awaited<ReturnType<typeof time>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTime<
  TData = Awaited<ReturnType<typeof time>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof time>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof time>>,
          TError,
          Awaited<ReturnType<typeof time>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useTime<
  TData = Awaited<ReturnType<typeof time>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof time>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useTime<
  TData = Awaited<ReturnType<typeof time>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof time>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getTimeQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetches all interactions
 */
export const interactions = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Interactions200>> => {
  return axios.get(`/interactions`, options);
};

export const getInteractionsQueryKey = () => {
  return [`/interactions`] as const;
};

export const getInteractionsQueryOptions = <
  TData = Awaited<ReturnType<typeof interactions>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof interactions>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getInteractionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof interactions>>> = ({
    signal,
  }) => interactions({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof interactions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type InteractionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof interactions>>
>;
export type InteractionsQueryError = AxiosError<unknown>;

export function useInteractions<
  TData = Awaited<ReturnType<typeof interactions>>,
  TError = AxiosError<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof interactions>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof interactions>>,
          TError,
          Awaited<ReturnType<typeof interactions>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useInteractions<
  TData = Awaited<ReturnType<typeof interactions>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof interactions>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof interactions>>,
          TError,
          Awaited<ReturnType<typeof interactions>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useInteractions<
  TData = Awaited<ReturnType<typeof interactions>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof interactions>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useInteractions<
  TData = Awaited<ReturnType<typeof interactions>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof interactions>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getInteractionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetches all contacts
 */
export const contacts = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Contacts200>> => {
  return axios.get(`/contacts`, options);
};

export const getContactsQueryKey = () => {
  return [`/contacts`] as const;
};

export const getContactsQueryOptions = <
  TData = Awaited<ReturnType<typeof contacts>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof contacts>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getContactsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof contacts>>> = ({
    signal,
  }) => contacts({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof contacts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ContactsQueryResult = NonNullable<
  Awaited<ReturnType<typeof contacts>>
>;
export type ContactsQueryError = AxiosError<unknown>;

export function useContacts<
  TData = Awaited<ReturnType<typeof contacts>>,
  TError = AxiosError<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof contacts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof contacts>>,
          TError,
          Awaited<ReturnType<typeof contacts>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useContacts<
  TData = Awaited<ReturnType<typeof contacts>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof contacts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof contacts>>,
          TError,
          Awaited<ReturnType<typeof contacts>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useContacts<
  TData = Awaited<ReturnType<typeof contacts>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof contacts>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useContacts<
  TData = Awaited<ReturnType<typeof contacts>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof contacts>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getContactsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Fetches all agents
 */
export const agents = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Agents200>> => {
  return axios.get(`/agents`, options);
};

export const getAgentsQueryKey = () => {
  return [`/agents`] as const;
};

export const getAgentsQueryOptions = <
  TData = Awaited<ReturnType<typeof agents>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof agents>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAgentsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof agents>>> = ({
    signal,
  }) => agents({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof agents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AgentsQueryResult = NonNullable<Awaited<ReturnType<typeof agents>>>;
export type AgentsQueryError = AxiosError<unknown>;

export function useAgents<
  TData = Awaited<ReturnType<typeof agents>>,
  TError = AxiosError<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof agents>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof agents>>,
          TError,
          Awaited<ReturnType<typeof agents>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAgents<
  TData = Awaited<ReturnType<typeof agents>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof agents>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof agents>>,
          TError,
          Awaited<ReturnType<typeof agents>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAgents<
  TData = Awaited<ReturnType<typeof agents>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof agents>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAgents<
  TData = Awaited<ReturnType<typeof agents>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof agents>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAgentsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getWeatherResponseMock = (
  overrideResponse: Partial<Weather200> = {}
): Weather200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    location: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
    temp: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
  })),
  ...overrideResponse,
});

export const getTimeResponseMock = (
  overrideResponse: Partial<Time200> = {}
): Time200 => ({ current_time: faker.string.alpha(20), ...overrideResponse });

export const getInteractionsResponseMock = (
  overrideResponse: Partial<Interactions200> = {}
): Interactions200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    agent_id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    customer_id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    length_seconds: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    created_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split('.')[0]}Z`,
      undefined,
    ]),
  })),
  ...overrideResponse,
});

export const getContactsResponseMock = (
  overrideResponse: Partial<Contacts200> = {}
): Contacts200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  })),
  ...overrideResponse,
});

export const getAgentsResponseMock = (
  overrideResponse: Partial<Agents200> = {}
): Agents200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  })),
  ...overrideResponse,
});

export const getWeatherMockHandler = (
  overrideResponse?:
    | Weather200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Weather200> | Weather200)
) => {
  return http.get('*:3333/weather', async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getWeatherResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getTimeMockHandler = (
  overrideResponse?:
    | Time200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Time200> | Time200)
) => {
  return http.get('*:3333/time', async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getTimeResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getInteractionsMockHandler = (
  overrideResponse?:
    | Interactions200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Interactions200> | Interactions200)
) => {
  return http.get('*:3333/interactions', async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getInteractionsResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getContactsMockHandler = (
  overrideResponse?:
    | Contacts200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Contacts200> | Contacts200)
) => {
  return http.get('*:3333/contacts', async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getContactsResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getAgentsMockHandler = (
  overrideResponse?:
    | Agents200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Agents200> | Agents200)
) => {
  return http.get('*:3333/agents', async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getAgentsResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};
export const getConnexTechTestAPIMock = () => [
  getWeatherMockHandler(),
  getTimeMockHandler(),
  getInteractionsMockHandler(),
  getContactsMockHandler(),
  getAgentsMockHandler(),
];
